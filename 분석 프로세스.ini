분석 프로세스

1. 요청 분석
   - 요청 유형: 코드/폴더 구조 분석 및 문서화
   - 사용 언어/프레임워크: TypeScript, React 19, Next.js 15 (App Router), Tailwind CSS, Supabase 등
   - 명시적 요구사항: 디렉토리 구조의 이유 설명, 문서화
   - 암묵적 요구사항: 현대적 웹앱 구조, 유지보수성, 확장성, 역할별 분리
   - 핵심 문제: 왜 이런 구조로 설계되었는지, 각 폴더/파일의 역할은 무엇인지 설명
   - 프로젝트 맥락: AI 기반 퀴즈 생성/관리 서비스

2. 솔루션 설계
   - 각 폴더/파일의 역할을 파악
   - Next.js 15(App Router)와 모던 React의 구조적 특징 반영
   - 기능별, 관심사별 분리(Separation of Concerns)
   - 문서화는 마크다운(.md) 형식으로 작성

3. 구현 전략
   - 각 디렉토리/파일에 주석 및 설명 추가
   - 표/트리 구조로 시각화
   - 유지보수, 확장성, 협업을 고려한 설명

---

# 📁 프로젝트 디렉토리 구조 설명서

이 문서는 quizcraft 프로젝트의 디렉토리 구조와 각 폴더/파일의 역할, 그리고 이러한 구조를 채택한 이유를 설명합니다.

## 1. 최상위(루트) 디렉토리

```
quizcraft/
├─ public/
├─ src/
│  ├─ app/
│  ├─ components/
│  ├─ hooks/
│  ├─ lib/
├─ README.md
├─ package.json
├─ tsconfig.json
├─ ... (설정 및 문서 파일)
```

### 주요 목적
- **관심사 분리(Separation of Concerns)**: 기능별, 역할별로 폴더를 분리하여 유지보수성과 확장성을 높임
- **Next.js 15 App Router 구조**: `src/app` 폴더를 루트로 하여 라우팅 및 페이지 구성을 담당
- **공통 컴포넌트, 유틸리티, 훅 등은 별도 폴더로 분리**: 재사용성과 테스트 용이성 확보

---

## 2. 주요 폴더 및 파일 설명

### 📁 public/
- 정적 파일(이미지, SVG, favicon 등) 저장
- Next.js의 정적 자산 제공 방식에 맞춘 구조

### 📁 src/
#### ├─ app/
- **Next.js 15 App Router의 핵심 폴더**
- 각종 페이지, API 라우트, 레이아웃, 글로벌 스타일 등 포함
- 폴더 기반 라우팅: 폴더명 = URL 경로

##### 주요 하위 구조
- **api/**: 서버리스 API 라우트(백엔드 역할)
  - 예: `/api/generate-quiz/route.ts` → `/api/generate-quiz` 엔드포인트
- **[route].tsx**: 각 페이지별 React 컴포넌트(클라이언트/서버 컴포넌트 혼용)
- **layout.tsx**: 전체 레이아웃(공통 UI, 네비게이션 등)
- **globals.css**: 전역 스타일

#### ├─ components/
- **공통 UI 컴포넌트**(Header, Sidebar, Toast 등)
- 재사용 가능한 단위 UI, 상태 없는 컴포넌트 위주

#### ├─ hooks/
- **커스텀 React 훅** 저장소
- 예: `useToast.tsx`(토스트 알림 상태 관리)

#### ├─ lib/
- **비즈니스 로직, 외부 서비스 연동, 유틸리티 함수**
- 예: `supabase.ts`(Supabase 클라이언트), `openai.ts`(OpenAI 연동), `auth.ts`(인증 로직)

---

## 3. 기타 파일

- **README.md**: 프로젝트 소개 및 사용법
- **package.json, tsconfig.json**: 의존성, 타입스크립트 설정
- **eslint.config.mjs, postcss.config.mjs**: 코드 품질 및 스타일링 도구 설정
- **FAVORITES_SETUP.md, SUPABASE_SETUP.md, 기획.md**: 기능별/서비스별 문서

---

## 4. 구조적 특징 및 장점

- **Next.js 15 App Router 표준 준수**: 최신 라우팅, 서버/클라이언트 컴포넌트 분리, API 라우트 통합
- **관심사별 폴더 분리**: 유지보수, 협업, 테스트 용이
- **공통 컴포넌트/훅/유틸리티 분리**: 코드 중복 최소화, 재사용성 극대화
- **정적/동적 자산 분리**: 퍼포먼스 및 보안 강화

---

## 5. 시각적 구조 요약

```mermaid
graph TD
  A[quizcraft/]
  A --> B(public/)
  A --> C(src/)
  C --> D(app/)
  C --> E(components/)
  C --> F(hooks/)
  C --> G(lib/)
  A --> H(README.md)
  A --> I(package.json)
  A --> J(tsconfig.json)
  A --> K(기타 설정/문서)
```

---

## 6. 결론

이 구조는 Next.js 15와 모던 React의 권장 아키텍처를 따르며, 확장성, 유지보수성, 협업 효율을 극대화하기 위해 설계되었습니다. 각 폴더는 명확한 역할을 가지며, 새로운 기능 추가나 리팩토링 시에도 일관된 패턴을 유지할 수 있습니다.

---

요하다면 각 폴더/파일별 상세 설명서도 추가로 제공해드릴 수 있습니다!                             1